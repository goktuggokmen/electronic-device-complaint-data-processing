# -*- coding: utf-8 -*-
"""ELEKTRONİK ÜRÜN ŞİKAYET VERİSİ TOPLAMA VE VERİLERİ İŞLEME (LAPTOPLOR) STAJ RAPORU

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PZd26wzkPAlABbi3QhaD30QtcxIKqA_6

##**İZMİR DEMOKRASİ ÜNİVERSİTESİ**
##**ELEKTRİK-ELEKTRONİK MÜHENDİSLİĞİ BÖLÜMÜ**
##**2019-2020 YAZ DÖNEMİ STAJI**
##**ELEKTRONİK ÜRÜN ŞİKAYET VERİSİ TOPLAMA VE VERİLERİ İŞLEME (LAPTOPLAR) STAJ RAPORU**

**AD :** Göktuğ

**SOYAD :** GÖKMEN

**ÖĞRENCİ NO :** 1806102007

**SORUMLU AKADEMİSYEN :** Dr.Öğretim Üyesi Başak Esin KÖKTÜRK GÜZEL

**STAJ SÜRESİ/ZAMANI :** 20 İŞ GÜNÜ / 17 AĞUSTOS 2020 - 11 EYLÜL 2020

# 1.HEDEF
Çeşitli şikayet sitelerinde yayınlanmış bir elektronik ürün (örn. Laptop) kategorisindeki şikayetlerin toplanarak yapılandırılmış veri haline getirilmesi beklenmektedir. Örneğin bir laptop a ait, marka, model, işlemci tipi, ekran kartı modeli, şikayet metni ve özet şikayetin çıkarılması beklenmektedir. Proje sonunda toplanan veriler ile çeşitli analizler yapılacaktır.

# 2. KÜTÜPHANELERİN IMPORT EDİLMESİ VE VERİLERİN DOSYADAN OKUNMASI

> a.Kütüphanelerin import edilmesi
"""

# Pandas kütüphanesinin yüklenmesi
import pandas as pd
# Matpotlib kütüphanesinin yüklenmesi
import matplotlib.pyplot as plt
#Seaborn kütüphanesinin yüklenmesi
import seaborn as sns

"""> b.Verilerin dosyadan okunması


"""

data = pd.read_excel("/content/ELEKTRONİK ÜRÜN ŞİKAYET VERİSİ TOPLAMA (LAPTOPLAR).xlsx")

"""# 3.VERİ DOSYASININ İNCELENMESİ"""

#Verinin boyutları
data.shape

"""1742 satır , 51 sütundan oluşan bir veri."""

data.columns #Kolon isimleri

#İlk 10 veri
data.head(10)

#Son 10 veri
data.tail(10)

data.info() #Veriye dair genel bilgiler (Hangi kolonda ne kadar veri var ve bu verilerin türleri nelerdir ?)

data.describe() #Sayısal veri içeren kolonlar'ın (float ve int) istatiksel analizi

"""# 4.SÜTUNLARIN İNCELENMESİ VE GÖRSELLEŞTİRİLMESİ

**4.1) MARKA**
"""

data['MARKA'].describe() # Sütuna ait genel bilgi

data["MARKA"].value_counts() # Hangi markadan ne kadar veri var ?

"""PASTA GRAFİĞİ"""

data["MARKA"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , shadow = True , startangle=90 , autopct='%1.1f%%') # Hangi markadan ne kadar veri olduğunun pasta grafiği ve yüzde olarak görselleştirilmesi

"""BAR GRAFİĞİ"""

data["MARKA"]=data["MARKA"].astype('category')
sns.countplot(x="MARKA", data=data)

"""**4.2) MODEL**"""

data['MODEL'].describe()

data["MODEL"].value_counts()

"""SÜTUN GRAFİĞİ"""

data["MODEL"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(20,8), edgecolor="#000000" , linewidth=3)
plt.xlabel("MODEL")

"""**4.3) CİHAZ AĞIRLIĞI**"""

data['Cihaz Ağırlığı (kg)'].describe()

data["Cihaz Ağırlığı (kg)"].value_counts()

"""SÜTUN GRAFİĞİ"""

data["Cihaz Ağırlığı (kg)"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Cihaz Ağırlığı (kg)")

"""4.4) KALINLIK"""

data['Kalınlık (mm)'].describe()

data["Kalınlık (mm)"].value_counts()

"""SÜTUN GRAFİĞİ"""

data["Kalınlık (mm)"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Kalınlık (mm)")

"""**4.5) SIZDIRMA KORUMALI**"""

data['Sızdırma Korumalı (Su Sıçramalarına Karşı Dayanıklı)'].describe()

data["Sızdırma Korumalı (Su Sıçramalarına Karşı Dayanıklı)"].value_counts()

"""**4.6) GENİŞLİK**"""

data['Genişlik (mm)'].describe()

data["Genişlik (mm)"].value_counts()

"""SÜTUN GRAFİĞİ"""

data["Genişlik (mm)"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Genişlik (mm)")

"""**4.7) UZUNLUK**"""

data['Uzunluk (mm)'].describe()

data["Uzunluk (mm)"].value_counts()

"""SÜTUN GRAFİĞİ"""

data["Uzunluk (mm)"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Uzunluk (mm)")

"""**4.8) DÖNDÜR VE KATLA TASARIMINA SAHİPTİR**"""

data['Döndür Ve Katla Tasarımına Sahiptir'].describe()

data["Döndür Ve Katla Tasarımına Sahiptir"].value_counts()

"""PASTA GRAFİĞİ"""

data["Döndür Ve Katla Tasarımına Sahiptir"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , shadow = True , startangle=90 , autopct='%1.1f%%')

"""SÜTUN GRAFİĞİ"""

data["Döndür Ve Katla Tasarımına Sahiptir"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Döndür Ve Katla Tasarımına Sahiptir")

"""**4.9) ÇÖZÜNÜRLÜK**"""

data['Çözünürlük (px)'].describe()

data["Çözünürlük (px)"].value_counts()

"""PASTA GRAFİĞİ"""

data["Çözünürlük (px)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,16) , shadow = True , startangle=90 , autopct='%1.1f%%')

"""BAR GRAFİĞİ"""

data["Çözünürlük (px)"]=data["Çözünürlük (px)"].astype('category')
sns.countplot(x= "Çözünürlük (px)", data=data)

"""**4.10) EKRAN BOYUTU**"""

data['Ekran Boyutu (inç)'].describe()

data["Ekran Boyutu (inç)"].value_counts()

"""PASTA GRAFİĞİ"""

data["Ekran Boyutu (inç)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,16) , shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞİ"""

data["Ekran Boyutu (inç)"]=data["Ekran Boyutu (inç)"].astype('category')
sns.countplot(x= "Ekran Boyutu (inç)", data=data)

"""**4.11) YASIMA ÖNLEYİCİ KAPLAMASI VARDIR**"""

data['Yansıma Önleyici Kaplaması Vardır'].describe()

data["Yansıma Önleyici Kaplaması Vardır"].value_counts()

data["Yansıma Önleyici Kaplaması Vardır"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , shadow = True , autopct='%1.1f%%')

"""SÜTUN GRAFİĞİ"""

data["Yansıma Önleyici Kaplaması Vardır"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Yansıma Önleyici Kaplaması Vardır")

"""**4.12) DOKUNMATİK EKRAN VARDIR**"""

data['Dokunmatik Ekran Vardır'].describe()

data["Dokunmatik Ekran Vardır"].value_counts()

"""PASTA GRAFİĞİ"""

data["Dokunmatik Ekran Vardır"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , shadow = True , autopct='%1.1f%%')

"""SÜTUN GRAFİĞİ"""

data["Dokunmatik Ekran Vardır"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Dokunmatik Ekran Vardır")

"""**4.13) EKRAN PANEL TİPİ**"""

data['Ekran Panel Tipi'].describe()

data["Ekran Panel Tipi"].value_counts()

"""PASTA GRAFİĞİ"""

data["Ekran Panel Tipi"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞİ"""

data["Ekran Panel Tipi"]=data["Ekran Panel Tipi"].astype('category')
sns.countplot(x= "Ekran Panel Tipi", data=data)

"""4.14) DESTEKLENEN EKRANLAR"""

data['Desteklenen Ekranlar'].describe()

data["Desteklenen Ekranlar"].value_counts()

"""PASTA GRAFİĞİ"""

data["Desteklenen Ekranlar"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , shadow = True , startangle=90 , autopct='%1.1f%%')

"""SÜTUN GRAFİĞİ"""

data["Desteklenen Ekranlar"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Desteklenen Ekranlar")

"""4.15) EKRAN KARTI MODELİ"""

data['Ekran Kartı Modeli'].describe()

data['Ekran Kartı Modeli'].value_counts()

"""SÜTUN GRAFİĞİ"""

data["Ekran Kartı Modeli"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(12,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Ekran Kartı Modeli")

"""**4.16) EKRAN KARTI TİPİ**"""

data['Ekran Kartı Tipi'].describe()

data['Ekran Kartı Tipi'].value_counts()

"""PASTA GRAFİĞİ"""

data["Ekran Kartı Tipi"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , shadow = True , autopct='%1.1f%%')

"""SÜTUN GRAFİĞİ"""

data["Ekran Kartı Tipi"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Ekran Kartı Tipi")

"""4.17) EKRAN KARTI BELLEK TİPi"""

data['Ekran Kartı Bellek Tipi'].describe()

data['Ekran Kartı Bellek Tipi'].value_counts()

"""PASTA GRAFİĞi"""

data["Ekran Kartı Bellek Tipi"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞİ """

data["Ekran Kartı Bellek Tipi"]=data["Ekran Kartı Bellek Tipi"].astype('category')
sns.countplot(x= "Ekran Kartı Bellek Tipi", data=data)

"""**4.18) Ekran Kartı Hafızası**"""

data["Ekran Kartı Hafızası (GB)"].describe()

data["Ekran Kartı Hafızası (GB)"].value_counts()

"""PASTA GRAFİĞİ"""

data["Ekran Kartı Hafızası (GB)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,16) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞİ"""

data["Ekran Kartı Hafızası (GB)"]=data["Ekran Kartı Hafızası (GB)"].astype('category')
sns.countplot(x= "Ekran Kartı Hafızası (GB)", data=data)

"""**4.19) İŞLEMCİ MODELİ**"""

data["İşlemci Modeli"].describe()

data["İşlemci Modeli"].value_counts()

"""SÜTUN GRAFİĞİ"""

data["İşlemci Modeli"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(12,8), edgecolor="#000000" , linewidth=3)
plt.xlabel("İşlemci Modeli")

"""**4.20) İŞLEMCİ NESLİ**"""

data["İşlemci Nesli"].describe()

data["İşlemci Nesli"].value_counts()

"""SÜTUN GRAFİĞİ"""

data["İşlemci Nesli"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("İşlemci Nesli")

"""**4.21) İŞLEMCİ HIZI**"""

data["İşlemci Hızı (GHz)"].describe()

data["İşlemci Hızı (GHz)"].value_counts()

"""PASTA GRAFİĞi"""

data["İşlemci Hızı (GHz)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,16) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["İşlemci Hızı (GHz)"]=data["İşlemci Hızı (GHz)"].astype('category')
sns.countplot(x= "İşlemci Hızı (GHz)", data=data)

"""**4.22) RAM**"""

data["Ram (GB)"].describe()

data["Ram (GB)"].value_counts()

"""PASTA GRAFİĞi"""

data["Ram (GB)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Ram (GB)"]=data["Ram (GB)"].astype('category')
sns.countplot(x= "Ram (GB)", data=data)

"""**4.22) RAM HIZI**"""

data["Ram Hızı (MHz)"].describe()

data["Ram Hızı (MHz)"].value_counts()

"""PASTA GRAFİĞi"""

data["Ram Hızı (MHz)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,16) , startangle = 180 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Ram Hızı (MHz)"]=data["Ram Hızı (MHz)"].astype('category')
sns.countplot(x= "Ram Hızı (MHz)", data=data)

"""**4.23) İŞLEMCİ ÇEKİRDEK SAYISI**"""

data["İşlemci Çekirdek Sayısı"].describe()

data["İşlemci Çekirdek Sayısı"].value_counts()

"""PASTA GRAFİĞi"""

data["İşlemci Çekirdek Sayısı"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["İşlemci Çekirdek Sayısı"]=data["İşlemci Çekirdek Sayısı"].astype('category')
sns.countplot(x= "İşlemci Çekirdek Sayısı", data=data)

"""**4.24) DAHİLİ HAFIZA**"""

data["Dahili Hafıza (GB)"].describe()

data["Dahili Hafıza (GB)"].value_counts()

"""PASTA GRAFİĞi"""

data["Dahili Hafıza (GB)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Dahili Hafıza (GB)"]=data["Dahili Hafıza (GB)"].astype('category')
sns.countplot(x= "Dahili Hafıza (GB)", data=data)

"""**4.25) HARİCİ BELLEK YUVASI VARDIR**"""

data["Harici Bellek Yuvası Vardır"].describe()

data["Harici Bellek Yuvası Vardır"].value_counts()

"""PASTA GRAFİĞi"""

data["Harici Bellek Yuvası Vardır"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Harici Bellek Yuvası Vardır"]=data["Harici Bellek Yuvası Vardır"].astype('category')
sns.countplot(x= "Harici Bellek Yuvası Vardır", data=data)

"""**4.26) CPU İŞ PARÇACIĞI**"""

data["CPU İş Parçacığı"].describe()

data["CPU İş Parçacığı"].value_counts()

"""PASTA GRAFİĞi"""

data["CPU İş Parçacığı"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["CPU İş Parçacığı"]=data["CPU İş Parçacığı"].astype('category')
sns.countplot(x= "CPU İş Parçacığı", data=data)

"""**4.27) HDD DEPOLAMA KAPASİTESİ**"""

data["HDD Depolama Kapasitesi (GB)"].describe()

data["HDD Depolama Kapasitesi (GB)"].value_counts()

"""PASTA GRAFİĞi"""

data["HDD Depolama Kapasitesi (GB)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["HDD Depolama Kapasitesi (GB)"]=data["HDD Depolama Kapasitesi (GB)"].astype('category')
sns.countplot(x= "HDD Depolama Kapasitesi (GB)", data=data)

"""**4.28) USB TYPE-C MEVCUTTUR**"""

data["USB Type-C Mevcuttur"].describe()

data["USB Type-C Mevcuttur"].value_counts()

"""PASTA GRAFİĞi"""

data["USB Type-C Mevcuttur"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["USB Type-C Mevcuttur"]=data["USB Type-C Mevcuttur"].astype('category')
sns.countplot(x= "USB Type-C Mevcuttur", data=data)

"""**4.28) WİFİ ÖZELLİĞİ**"""

data["WiFi Özelliği"].describe()

data["WiFi Özelliği"].value_counts()

"""**4.29) USB 3.0 BAĞLANTI NOKTALARI**"""

data["USB 3.0 Bağlantı Noktaları"].describe()

data["USB 3.0 Bağlantı Noktaları"].value_counts()

"""PASTA GRAFİĞi"""

data["USB 3.0 Bağlantı Noktaları"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["USB 3.0 Bağlantı Noktaları"]=data["USB 3.0 Bağlantı Noktaları"].astype('category')
sns.countplot(x= "USB 3.0 Bağlantı Noktaları", data=data)

"""**4.30) HDMI ÇIKIŞI VARDIR**"""

data["HDMI Çıkışı Vardır"].describe()

data["HDMI Çıkışı Vardır"].value_counts()

"""PASTA GRAFİĞi"""

data["HDMI Çıkışı Vardır"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["HDMI Çıkışı Vardır"]=data["HDMI Çıkışı Vardır"].astype('category')
sns.countplot(x= "HDMI Çıkışı Vardır", data=data)

"""**4.31) AİRPLAY'İ VARDIR**"""

data["AirPlay'i Vardır"].describe()

data["AirPlay'i Vardır"].value_counts()

"""PASTA GRAFİĞi"""

data["AirPlay'i Vardır"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["AirPlay'i Vardır"]=data["AirPlay'i Vardır"].astype('category')
sns.countplot(x= "AirPlay'i Vardır", data=data)

"""**4.32) THUNDERBOLT BAĞLANTI NOKTALARI**"""

data["Thunderbolt Bağlantı Noktaları"].describe()

data["Thunderbolt Bağlantı Noktaları"].value_counts()

"""PASTA GRAFİĞi"""

data["Thunderbolt Bağlantı Noktaları"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Thunderbolt Bağlantı Noktaları"]=data["Thunderbolt Bağlantı Noktaları"].astype('category')
sns.countplot(x= "Thunderbolt Bağlantı Noktaları", data=data)

"""**4.33) USB 2.0 BAĞLANTI NOKTALARI**"""

data["USB 2.0 Bağlantı Noktaları"].describe()

data["USB 2.0 Bağlantı Noktaları"].value_counts()

"""PASTA GRAFİĞi"""

data["USB 2.0 Bağlantı Noktaları"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["USB 2.0 Bağlantı Noktaları"]=data["USB 2.0 Bağlantı Noktaları"].astype('category')
sns.countplot(x= "USB 2.0 Bağlantı Noktaları", data=data)

"""**4.34) VGA BAĞLANTI APARATI VARDIR**"""

data["VGA Bağlantı Aparatı Vardır"].describe()

data["VGA Bağlantı Aparatı Vardır"].value_counts()

"""PASTA GRAFİĞi"""

data["VGA Bağlantı Aparatı Vardır"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["VGA Bağlantı Aparatı Vardır"]=data["VGA Bağlantı Aparatı Vardır"].astype('category')
sns.countplot(x= "VGA Bağlantı Aparatı Vardır", data=data)

"""**4.35) PİL ÖMRÜ**"""

data["Pil Ömrü (h)"].describe()

data["Pil Ömrü (h)"].value_counts()

"""PASTA GRAFİĞi"""

data["Pil Ömrü (h)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,12) , startangle = 180 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Pil Ömrü (h)"]=data["Pil Ömrü (h)"].astype('category')
sns.countplot(x= "Pil Ömrü (h)", data=data)

"""**4.36) PİL GÜCÜ (mAh)**"""

data["Pil Gücü (mAh)"].describe()

data["Pil Gücü (mAh)"].value_counts()

"""PASTA GRAFİĞi"""

data["Pil Gücü (mAh)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,12) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Pil Gücü (mAh)"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(8,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("Pil Gücü (mAh)")

"""**4.37) PİL GÜCÜ (Wh)**"""

data["Pil Gücü (Wh)"].describe()

data["Pil Gücü (Wh)"].value_counts()

"""PASTA GRAFİĞi"""

data["Pil Gücü (Wh)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,12) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Pil Gücü (Wh)"]=data["Pil Gücü (Wh)"].astype('category')
sns.countplot(x= "Pil Gücü (Wh)", data=data)

"""**4.38) DAHİLİ STEREO HOPARLÖR VARDIR**"""

data["Dahili Stereo Hoparlörü Vardır"].describe()

data["Dahili Stereo Hoparlörü Vardır"].value_counts()

"""**4.39) 3.5 MM KULAKLIK GİRİŞİ VARDIR**"""

data["3,5 mm Kulaklık Girişi Vardır"].describe()

data["3,5 mm Kulaklık Girişi Vardır"].value_counts()

"""PASTA GRAFİĞi"""

data["3,5 mm Kulaklık Girişi Vardır"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["3,5 mm Kulaklık Girişi Vardır"]=data["3,5 mm Kulaklık Girişi Vardır"].astype('category')
sns.countplot(x= "3,5 mm Kulaklık Girişi Vardır", data=data)

"""**4.40) PARMAK İZİ OKUYUCUSU MEVCUTTUR**"""

data["Parmak İzi Okuyucusu Mevcuttur"].describe()

data["Parmak İzi Okuyucusu Mevcuttur"].value_counts()

"""PASTA GRAFİĞi"""

data["Parmak İzi Okuyucusu Mevcuttur"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Parmak İzi Okuyucusu Mevcuttur"]=data["Parmak İzi Okuyucusu Mevcuttur"].astype('category')
sns.countplot(x= "Parmak İzi Okuyucusu Mevcuttur", data=data)

"""**4.41) MİKROFON SAYISI**"""

data["Mikrofon Sayısı"].describe()

data["Mikrofon Sayısı"].value_counts()

"""PASTA GRAFİĞi"""

data["Mikrofon Sayısı"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Mikrofon Sayısı"]=data["Mikrofon Sayısı"].astype('category')
sns.countplot(x= "Mikrofon Sayısı", data=data)

"""**4.42) SESLİ KOMUT ÖZELLİĞİ VARDIR**"""

data["Sesli Komut Özelliği Vardır"].describe()

data["Sesli Komut Özelliği Vardır"].value_counts()

"""PASTA GRAFİĞi"""

data["Sesli Komut Özelliği Vardır"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Sesli Komut Özelliği Vardır"]=data["Sesli Komut Özelliği Vardır"].astype('category')
sns.countplot(x= "Sesli Komut Özelliği Vardır", data=data)

"""**4.43) DAHİLİ GRAFİK KARTI MEVCUTTUR**"""

data["Dahili Grafik Kartı Mevcuttur"].describe()

data["Dahili Grafik Kartı Mevcuttur"].value_counts()

"""**4.44) GPU BELLEK HIZI**"""

data["GPU Bellek Hızı (MHz)"].describe()

data["GPU Bellek Hızı (MHz)"].value_counts()

"""BAR GRAFİĞi"""

data["GPU Bellek Hızı (MHz)"].value_counts().plot(kind='bar', color="#ff0000" , figsize=(12,4), edgecolor="#000000" , linewidth=3)
plt.xlabel("GPU Bellek Hızı (MHz)")

"""**4.45) BOŞTA İKEN GÜÇ TÜKETİMİ**"""

data["Boşta İken Güç Tüketimi (W)"].describe()

data["Boşta İken Güç Tüketimi (W)"].value_counts()

"""PASTA GRAFİĞi"""

data["Boşta İken Güç Tüketimi (W)"].value_counts().plot(kind='pie', subplots=True, figsize=(16,8) , startangle = 0 ,shadow = True , autopct='%1.1f%%')

"""BAR GRAFİĞi"""

data["Boşta İken Güç Tüketimi (W)"]=data["Boşta İken Güç Tüketimi (W)"].astype('category')
sns.countplot(x= "Boşta İken Güç Tüketimi (W)", data=data)

"""# 5.ŞİKAYET KATEGORİLERİNİN İNCELENMESİ

# **5.1) Arızalı Ürün**
"""

arizali_urun = data[data['Şikayet Kategorisi'].str.contains('Arızalı ürün')]

arizali_urun[['MARKA','MODEL','Şikayet Kategorisi']].info()

""""Arızalı Ürün" şikayet kategorisine ait 62 veri var."""

arizali_urun[['MARKA','MODEL','Şikayet Kategorisi']].describe()

"""> *   Arızalı ürün şikayetinin markalara göre kıyaslaması



"""

arizali_urun["MARKA"].value_counts()

""""Arızalı ürün" şikayetini en çok alan marka 48 şikayetle "ASUS"

> *   Arızalı ürün şikayetinin modele göre kıyaslaması
"""

arizali_urun["MODEL"].value_counts()

""""Arızalı ürün" şikayetini en çok alan model 12 şikayetle "Asus VivoBook X542UR-GQ029T 15.6" Intel Core Intel Core i5-7200U 2.5 GHz / 8 GB / 1000 GB" ve onu takip eden 7 şikayetle "Asus X542UR-GQ434 15.6" Intel Core i5-8250U 1.6 GHz / 4 GB / 1 TB""""

corr = arizali_urun.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""# **5.2) Batarya Performansı**"""

batarya_performansi = data[data['Şikayet Kategorisi'].str.contains('Batarya performansı')]

batarya_performansi[['MARKA','MODEL','Pil Ömrü (h)','Pil Gücü (mAh)','Pil Gücü (Wh)','Boşta İken Güç Tüketimi (W)','Şikayet Kategorisi']].info()

""""Batarya performansı" şikayet kategorisine ait 124 veri var."""

batarya_performansi[['MARKA','MODEL','Pil Ömrü (h)','Pil Gücü (mAh)','Pil Gücü (Wh)','Boşta İken Güç Tüketimi (W)','Şikayet Kategorisi']].describe()

"""> *   Batarya performansı şikayetinin markalara göre kıyaslaması



"""

batarya_performansi["MARKA"].value_counts()

""""Batarya performansı" şikayetini en çok alan marka 55 şikayetle "LENOVO" ve onu takip eden 42 şikayetle "ASUS"

> *   Batarya performansı şikayetinin modele göre kıyaslaması
"""

batarya_performansi["MODEL"].value_counts()

""""Batarya performansı" şikayetini en çok alan model 22 şikayetle "Lenovo IdeaPad S145-15API 15.6" AMD Ryzen 7 3700U 2.3 GHz / 8 GB / 512 GB SSD" ve onu takip eden 10 şikayetle "Asus VivoBook Pro N552VW 15.6" Intel Core i7-6700HQ 2.6 GHz / 16 GB / 1 TB + 256 GB SSD"

>* Batarya performansı şikayetinin pil ömrüne göre kıyaslaması
"""

batarya_performansi["Pil Ömrü (h)"].value_counts()

""""Batarya performansı" şikayeti görülen cihazlar en çok 6 saatlik pil ömrüne sahip cihazlar , ardından 4 saatlik pil ömrüne sahip cihazlar geliyor.

>* Batarya performansı şikayetinin pil gücüne (mAh) göre kıyaslaması
"""

batarya_performansi["Pil Gücü (mAh)"].value_counts()

""""Batarya performansı" şikayetine sahip cihazların 14'ü 3200 mAh'lık pil gücüne sahip , onu takip eden 4870 mAh pil gücüne sahip 5 cihaz var.

>* Batarya performansı şikayetinin pil gücüne (Wh) göre kıyaslaması
"""

batarya_performansi["Pil Gücü (Wh)"].value_counts()

""""Batarya performansı" şikayetine sahip cihazların 52'si 30 Wh'luk pil gücüne sahip , onu takip eden 33 Wh pil gücüne sahip 7 cihaz var.

>* Batarya performansı şikayetine sahip modellerin sayısal özelliklerinin histogram grafikleri
"""

batarya_performansi[['Pil Ömrü (h)','Pil Gücü (mAh)','Pil Gücü (Wh)','Boşta İken Güç Tüketimi (W)']].hist(bins=15, xlabelsize = 8, ylabelsize = 8)
plt.tight_layout(rect=(0, 0, 2, 2))

""">* "Batarya performansı" şikayetine sahip modellerin sayısal özelliklerinin scatter-plot grafikleri"""

ozellikler = ['Pil Ömrü (h)','Pil Gücü (mAh)', 'Pil Gücü (Wh)','Boşta İken Güç Tüketimi (W)']
pp = sns.pairplot(data[ozellikler], height=1.8, aspect=1.8,plot_kws=dict(edgecolor="k", linewidth=0.5),diag_kind="kde", diag_kws=dict(shade=True))

""">* "Batarya performansı" şikayetine sahip modellerin tüm özelliklerinin birbiriyle ilişkisini gösteren grafik"""

corr = batarya_performansi.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""Bu grafikler sonucunda elde ettiğimiz bilgiler şu şekildedir :

"Batarya performansı" şikayeti gözlenen cihazlarda ,

* Pil Ömrü ile Pil Gücü (Wh) doğru orantılı,Pil Gücü (mAh) ters orantılı

# **5.3 ) Cihaz Ağırlığı**
"""

cihaz_agirligi = data[data['Şikayet Kategorisi'].str.contains('Cihaz Ağırlığı')]

cihaz_agirligi[['MARKA','MODEL','Cihaz Ağırlığı (kg)','Şikayet Kategorisi']].info()

""""Cihaz Ağırlığı" şikayet kategorisine ait 6 veri var."""

cihaz_agirligi[['MARKA','MODEL','Cihaz Ağırlığı (kg)','Şikayet Kategorisi']].describe()

"""> *   Cihaz ağırlığı şikayetinin markalara göre kıyaslaması



"""

cihaz_agirligi["MARKA"].value_counts()

""""Cihaz ağırlığı" şikayetini alan markalar "ASUS" ve "ACER"

> *   Cihaz ağırlığı şikayetinin modele göre kıyaslaması
"""

cihaz_agirligi["MODEL"].value_counts()

""""Cihaz ağırlığı" şikayetini en çok alan model "Asus VivoBook Pro N552VW 15.6" Intel Core i7-6700HQ 2.6 GHz / 16 GB / 1 TB + 128 GB SSD"

>* Cihaz ağırlığı şikayetinin cihaz ağırlığı (kg)'na göre kıyaslaması
"""

cihaz_agirligi["Cihaz Ağırlığı (kg)"].value_counts()

""""Cihaz ağırlığı" şikayeti en çok "2.53" cihaz ağırlığına sahip cihazlarda gözleniyor.

>* "Cihaz ağırlığı" şikayetine sahip modellerin tüm özelliklerinin birbiriyle ilişkisini gösteren grafik
"""

corr = cihaz_agirligi.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""Bu grafikler sonucunda elde ettiğimiz bilgiler şu şekildedir :

"Batarya performansı" şikayeti gözlenen cihazlarda ,

* Pil Ömrü ile Pil Gücü (Wh) doğru orantılı,Pil Gücü (mAh) ters orantılı

# **5.4 ) Depolama Alanı Yetersiz**
"""

depolama_alani_yetersiz = data[data['Şikayet Kategorisi'].str.contains('Depolama alanı yetersiz')]

depolama_alani_yetersiz[['MARKA','MODEL','Dahili Hafıza (GB)','HDD Depolama Kapasitesi (GB)']].info()

""""Depolama alanı yetersiz" şikayet kategorisine ait 64 veri var."""

depolama_alani_yetersiz[['MARKA','MODEL','Dahili Hafıza (GB)','HDD Depolama Kapasitesi (GB)']].describe()

"""> *   Depolama alanı yetersiz şikayetinin markalara göre kıyaslaması



"""

depolama_alani_yetersiz["MARKA"].value_counts()

""""Depolama alanı yetersiz" şikayetini en çok alan markalar 14 şikayetle "ACER" "APPLE" ve "HOMETECH" ve onu takip eden 10 şikayetle "ASUS"

> *   Depolama alanı yetersiz şikayetinin modele göre kıyaslaması
"""

depolama_alani_yetersiz["MODEL"].value_counts()

""""Depolama alanı yetersiz" şikayetini en çok alan model 12 şikayetle "Hometech Alfa 110A 11.6" Intel Atom-Z3735F 1.33 GHz / 2 GB / 32 GB eMMC " ve onu takip eden 8 şikayetle "Asus E402NA-GA046T 14" Intel Celeron-N3350 1.10 GHz / 4 GB / 64 GB eMMC" ve 7 şikayetle "Acer Aspire One AO1-132-C4RS 11.6" Intel Celeron N3060 1.6 GHz / 2 GB / 32 GB eMMC"

>* Depolama alanı yetersiz şikayetinin dahili hafıza'ya göre kıyaslaması
"""

depolama_alani_yetersiz["Dahili Hafıza (GB)"].value_counts()

""""Depolama alanı yetersiz" şikayeti görülen cihazların 21 tanesi "32" ve 20 tanesi "128" gb dahili hafızaya sahipler.

>* Depolama alanı yetersiz şikayetinin HDD depolama kapasitesi'ne göre kıyaslaması
"""

depolama_alani_yetersiz["HDD Depolama Kapasitesi (GB)"].value_counts()

"""Burada az veri bulunduğundan karşılaştırılmaya uygun değildir."HDD Depolama Kapasitesi (GB)" alanında bu kadar az veri olmasının sebebi "Depolama alanı yetersiz" şikayetimi alan cihazlarda çoğunlukla SSD depolama bulunmasıdır.

>* "Depolama alanı yetersiz" şikayetine sahip modellerin sayısal özelliklerinin scatter-plot grafikleri
"""

ozellikler = ['Dahili Hafıza (GB)','HDD Depolama Kapasitesi (GB)']
pp = sns.pairplot(data[ozellikler], height=1.8, aspect=1.8,plot_kws=dict(edgecolor="k", linewidth=0.5),diag_kind="kde", diag_kws=dict(shade=True))

""">* "Depolama alanı yetersiz" şikayetine sahip modellerin tüm özelliklerinin birbiriyle ilişkisini gösteren grafik"""

corr = depolama_alani_yetersiz.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""Bu grafikler sonucunda elde ettiğimiz bilgiler şu şekildedir :

"Depolama alanı yetersiz" şikayeti gözlenen cihazlarda ,

* HDD Depolama Kapasitesi (GB) ile Dahili Hafıza (GB)'nın doğru orantılı olduğu gözlenmiştir.

# **5.5 ) Ekran Kartı Performansı**
"""

ekran_karti_performansi = data[data['Şikayet Kategorisi'].str.contains('Ekran kartı performansı')]

ekran_karti_performansi[['MARKA','MODEL','Ekran Kartı Modeli','Ekran Kartı Tipi','Ekran Kartı Bellek Tipi','Ekran Kartı Hafızası (GB)','Dahili Grafik Kartı Mevcuttur','GPU Bellek Hızı (MHz)','Şikayet Kategorisi']].info()

""""Ekran kartı performansı" şikayet kategorisine ait 76 veri var."""

ekran_karti_performansi[['MARKA','MODEL','Ekran Kartı Modeli','Ekran Kartı Tipi','Ekran Kartı Bellek Tipi','Ekran Kartı Hafızası (GB)','Dahili Grafik Kartı Mevcuttur','GPU Bellek Hızı (MHz)','Şikayet Kategorisi']].describe()

"""> *   Ekran kartı performansı şikayetinin markalara göre kıyaslaması



"""

ekran_karti_performansi["MARKA"].value_counts()

""""Ekran kartı performansı" şikayetini en çok alan marka 27 şikayetle "ASUS" , onu takip eden 20 şikayetle "LENOVO" ve 13 şikayetle "DELL"

> *   Ekran kartı performansı şikayetinin modele göre kıyaslaması
"""

ekran_karti_performansi["MODEL"].value_counts()

""""Ekran kartı performansı" şikayetini en çok alan model 7 şikayetle "Asus Vivobook X542UR-GQ438T 15.6" Intel Core i5-8250U 1.6 GHz / 8 GB / 1 TB " ve onu takip eden 6 şikayetle "Asus VivoBook 15 X505BP-BR019 15.6" AMD A9 9420  2.9 GHz / 4 GB / 1000 GB  " ve "Dell Inspiron 5567-G20W81C 15.6" Intel Core i5-7200U 2.5 GHz / 8 GB / 1 TB "

>* Ekran kartı performansı şikayetinin Ekran kartı modeline göre kıyaslaması
"""

ekran_karti_performansi["Ekran Kartı Modeli"].value_counts()

""""Ekran kartı performansı" şikayetini en çok alan ekran kartı modeli 18 şikayetle "AMD Radeon 530" ve 10 şikayetle "Nvidia GeForce GT930MX"

>* Ekran kartı performansı şikayetinin ekran kartı tipine göre kıyaslaması
"""

ekran_karti_performansi["Ekran Kartı Tipi"].value_counts()

"""Ekran kartı performansını şikayetini en çok alan ekran kartı tipi "Harici Ekran Kartı"

>* Ekran kartı performansı şikayetinin ekran kartı bellek tipine göre kıyaslaması
"""

ekran_karti_performansi["Ekran Kartı Bellek Tipi"].value_counts()

""""Ekran kartı performansı" şikayetini en çok alan ekran kartı bellek tipi "GDDR5"

>  * Ekran kartı performansı şikayetinin ekran kartı hafızasına göre kıyaslaması
"""

ekran_karti_performansi["Ekran Kartı Hafızası (GB)"].value_counts()

""""Ekran kartı performansı" şikayetini en çok alan ekran kartı hafızası "2.00 GB"

>  * Ekran kartı performansı şikayetinin dahili grafik kartı mevcuttura göre kıyaslaması
"""

ekran_karti_performansi["Dahili Grafik Kartı Mevcuttur"].value_counts()

""">  * Ekran kartı performansı şikayetinin GPU bellek hızına göre kıyaslaması"""

ekran_karti_performansi["GPU Bellek Hızı (MHz)"].value_counts()

""""Ekran kartı performansı" şikayetini en çok alan GPU bellek hızı 15 şikayetle "1024.0",13 şikayetle "780.0" ve 11 şikayetle "950.0"

>* Ekran kartı performansı şikayetine sahip modellerin sayısal özelliklerinin histogram grafikleri
"""

ekran_karti_performansi[['Ekran Kartı Hafızası (GB)','GPU Bellek Hızı (MHz)']].hist(bins=5, xlabelsize = 8, ylabelsize = 8)
plt.tight_layout(rect=(0, 0, 1.2, 1.2))

""">* "Ekran kartı performansı" şikayetine sahip modellerin sayısal özelliklerinin scatter-plot grafikleri"""

ozellikler = ['Ekran Kartı Hafızası (GB)','GPU Bellek Hızı (MHz)']
pp = sns.pairplot(data[ozellikler], height=2, aspect=2,plot_kws=dict(edgecolor="k", linewidth=0.5),diag_kind="kde", diag_kws=dict(shade=True))

""">* "Ekran kartı performansı" şikayetine sahip modellerin tüm özelliklerinin birbiriyle ilişkisini gösteren grafik"""

corr = ekran_karti_performansi.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""# **5.6 ) Donma Sorunu**"""

donma_sorunu = data[data['Şikayet Kategorisi'].str.contains('Donma sorunu')]

donma_sorunu[['MARKA','MODEL','Şikayet Kategorisi']].info()

""""Donma sorunu" şikayet kategorisine ait 115 veri var."""

donma_sorunu[['MARKA','MODEL','Şikayet Kategorisi']].describe()

"""> *   Donma sorunu şikayetinin markalara göre kıyaslaması



"""

donma_sorunu["MARKA"].value_counts()

""""Donma sorunu" şikayetini en çok alan marka 53 şikayetle "ASUS"

> *   Donma sorunu şikayetinin modele göre kıyaslaması
"""

donma_sorunu["MODEL"].value_counts()

""""Donma sorunu" şikayetini en çok alan model 15 şikayetle "Hometech Alfa 110A 11.6" Intel Atom-Z3735F 1.33 GHz / 2 GB / 32 GB eMMC" onu takip eden 9 şikayetle "ASUS X550VX-DM324D 15.6" Intel Core i7-6700HQ 2.6 GHz / 16 GB / 1000 GB HDD" ve de 8 şikayetle "Asus VivoBook 15 X505BP-BR019 15.6" AMD A9 9420  2.9 GHz / 4 GB / 1000 GB""""

corr = donma_sorunu.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""# **5.6 ) Ekran Performansı**"""

ekran_performansi = data[data['Şikayet Kategorisi'].str.contains('Ekran performansı')]

ekran_performansi[['MARKA','MODEL','Çözünürlük (px)','Ekran Boyutu (inç)','Yansıma Önleyici Kaplaması Vardır','Dokunmatik Ekran Vardır','Ekran Panel Tipi','Desteklenen Ekranlar','Şikayet Kategorisi']].info()

""""Ekran performansı" şikayet kategorisine ait 135 veri var."""

ekran_performansi[['MARKA','MODEL','Çözünürlük (px)','Ekran Boyutu (inç)','Yansıma Önleyici Kaplaması Vardır','Dokunmatik Ekran Vardır','Ekran Panel Tipi','Desteklenen Ekranlar','Şikayet Kategorisi']].describe()

"""> *   Ekran performansı şikayetinin markalara göre kıyaslaması



"""

ekran_performansi["MARKA"].value_counts()

""""Ekran performansı" şikayetini en çok alan marka 40 şikayetle "ASUS" , onu takip eden 36 şikayetle "LENOVO"

> *   Ekran performansı şikayetinin model'e göre kıyaslaması
"""

ekran_performansi["MODEL"].value_counts()

""""Ekran performansı" şikayetini en çok alan model 18 şikayetle "Lenovo IdeaPad S145-15API 15.6" AMD Ryzen 7 3700U 2.3 GHz / 8 GB / 512 GB SSD" ve onu takip eden 8 şikayetle "Lenovo V330-15IKB 15.6" Intel Core i5-8250U 1.6 GHz / 8 GB / 1 TB  HDD + 128 GB SSD"

>* Ekran performansı şikayetinin çözünürlüğe göre kıyaslaması
"""

ekran_performansi["Çözünürlük (px)"].value_counts()

""""Ekran performansı" şikayetini en çok alan modeller "1920 x 1080" ve "1366 x 768" ekran çözünürlüğüne sahiptir.

>* Ekran performansı şikayetinin ekran boyutuna göre kıyaslaması
"""

ekran_performansi["Ekran Boyutu (inç)"].value_counts()

"""Ekran performansı şikayetini en çok alan ekran boyutu "15.6"

>* Ekran performansı şikayetinin yansıma önleyici kaplaması vardır'a göre kıyaslaması
"""

ekran_performansi["Yansıma Önleyici Kaplaması Vardır"].value_counts()

""""Ekran performansı" şikayetini alan cihazların 71 tanesi yansıma önleyici kaplamaya sahip olup 25 tanesi sahip değildir.

>  * Ekran performansı şikayetinin dokunmatik ekran vardır'a göre kıyaslaması
"""

ekran_performansi["Dokunmatik Ekran Vardır"].value_counts()

""""Ekran performansı" şikayetini alan cihazların çoğunluğu dokunmatik ekrana sahip değildir.

>  * Ekran performansı şikayetinin ekran panel tipi'ne göre kıyaslaması
"""

ekran_performansi["Ekran Panel Tipi"].value_counts()

"""Ekran performansı şikayetini alan cihazların çoğunluğu TN ekran paneline sahiptir.

>  * Ekran performansı şikayetinin desteklenen ekranlar'a göre kıyaslaması
"""

ekran_performansi["Desteklenen Ekranlar"].value_counts()

""""Ekran performansı" şikayetini alan cihazların çoğunluğu "3.0" desteklenen ekran'a sahip

>* Ekran performansı şikayetine sahip modellerin sayısal özelliklerinin histogram grafikleri
"""

ekran_performansi[['Ekran Boyutu (inç)','Desteklenen Ekranlar']].hist(bins=5, xlabelsize = 8, ylabelsize = 8)
plt.tight_layout(rect=(0, 0, 1.2, 1.2))

""">* "Ekran performansı" şikayetine sahip modellerin sayısal özelliklerinin scatter-plot grafikleri"""

ozellikler = ['Ekran Boyutu (inç)','Desteklenen Ekranlar']
pp = sns.pairplot(data[ozellikler], height=2, aspect=2,plot_kws=dict(edgecolor="k", linewidth=0.5),diag_kind="kde", diag_kws=dict(shade=True))

""">* "Ekran performansı" şikayetine sahip modellerin tüm özelliklerinin birbiriyle ilişkisini gösteren grafik"""

corr = ekran_performansi.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""# **5.7 ) HDD Performansı**"""

hdd_performansi = data[data['Şikayet Kategorisi'].str.contains('HDD performansı')]

hdd_performansi[['MARKA','MODEL','HDD Depolama Kapasitesi (GB)','Şikayet Kategorisi']].info()

""""HDD performansı" şikayet kategorisine ait 67 veri var."""

hdd_performansi[['MARKA','MODEL','HDD Depolama Kapasitesi (GB)','Şikayet Kategorisi']].describe()

"""> *   HDD performansı şikayetinin markalara göre kıyaslaması



"""

hdd_performansi["MARKA"].value_counts()

""""HDD performansı" şikayetini en çok alan markalar 26 şikayetle "ASUS" ve 15 şikayetle "ACER"

> *   HDD performansı şikayetinin modele göre kıyaslaması
"""

hdd_performansi["MODEL"].value_counts()

""""HDD performansı" şikayetini en çok alan model 5 şikayetle "Acer E5-575G 15.6" Intel Core i5-7200U 2.5 GHz / 8 GB / 1000 GB HDD " ve 4 şikayetle "Acer Aspire A315-41G-R5J4 15.6" AMD Ryzen 3-2200 2.5 GHz / 4 GB / 1000 GB HDD"

>* HDD performansı şikayetinin cihaz ağırlığı (kg)'na göre kıyaslaması
"""

hdd_performansi["HDD Depolama Kapasitesi (GB)"].value_counts()

""""HDD performansı" şikayetine en çok "1000" HDD depolama kapasitesindeki cihazlar sahiptir

>* "HDD performansı" şikayetine sahip modellerin tüm özelliklerinin birbiriyle ilişkisini gösteren grafik
"""

corr = hdd_performansi.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""# **5.8 ) Isınma Sorunu**"""

isinma_sorunu = data[data['Şikayet Kategorisi'].str.contains('Isınma sorunu')]

isinma_sorunu[['MARKA','MODEL','Şikayet Kategorisi']].info()

""""Isınma sorunu" şikayet kategorisine ait 124 veri var."""

isinma_sorunu[['MARKA','MODEL','Şikayet Kategorisi']].describe()

"""> *  Isınma sorunu şikayetinin markalara göre kıyaslaması



"""

isinma_sorunu["MARKA"].value_counts()

""""Isınma sorunu" şikayetini en çok alan marka 42 şikayetle "ASUS" ve 29 şikayetle "ACER"

> *   Isınma sorunu şikayetinin modele göre kıyaslaması
"""

isinma_sorunu["MODEL"].value_counts()

""""Isınma sorunu" şikayetini en çok alan model 11 şikayetle "Hometech Alfa 110A 11.6" Intel Atom-Z3735F 1.33 GHz / 2 GB / 32 GB eMMC" ve "Acer Nitro 5 15.6" Intel Core i5-8300H 2.3 GHz / 8GB / 1TB HDD + 128 GB SSD""""

corr = isinma_sorunu.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""# **5.9 ) İşlemci Performansı**"""

islemci_performansi = data[data['Şikayet Kategorisi'].str.contains('İşlemci performansı')]

islemci_performansi[['MARKA','MODEL','İşlemci Modeli','İşlemci Nesli','İşlemci Hızı (GHz)','İşlemci Çekirdek Sayısı','CPU İş Parçacığı','Şikayet Kategorisi']].info()

""""İşlemci performansı" şikayet kategorisine ait 71 veri var."""

islemci_performansi[['MARKA','MODEL','İşlemci Modeli','İşlemci Nesli','İşlemci Hızı (GHz)','İşlemci Çekirdek Sayısı','CPU İş Parçacığı','Şikayet Kategorisi']].describe()

"""> *   İşlemci performansı şikayetinin markalara göre kıyaslaması



"""

islemci_performansi["MARKA"].value_counts()

""""İşlemci performansı" şikayetini en çok alan marka 28 şikayetle "ASUS" , onu takip eden 16 şikayetle "HP" ve 12 şikayetle "DELL"

> *   İşlemci performansı şikayetinin modele göre kıyaslaması
"""

islemci_performansi["MODEL"].value_counts()

""""İşlemci performansı" şikayetini en çok alan model 6 şikayetle "Asus Vivobook X540YA-XO185D 15.6" AMD E1-7010 1.5 GHz / 2 GB / 512 GB " ve "Asus X507MA-BR060T 15.6" Intel Celeron-N4000 1.10 GHz / 4 GB / 500 GB " , 5 şikayetle "HP 15-RA012NT 15.6" Intel Celeron-N3060 1.6 GHz / 4 GB / 512 GB HDD" ve "Lenovo Ideapad 320 80XS008NTX 15.6" AMD A12-9720P 2.7 GHz / 8 GB / 1 TB HDD"

>* İşlemci performansı şikayetinin işlemci modeline göre kıyaslaması
"""

islemci_performansi["İşlemci Modeli"].value_counts()

""""İşlemci performansı" şikayetini en çok alan işlemci modeli 12 şikayetle "AMD A9-9420 " ve 8 şikayetle "Intel Core i5-8250U"

>* İşlemci performansı şikayetinin işlemci nesli'ne göre kıyaslaması
"""

islemci_performansi["İşlemci Nesli"].value_counts()

"""İşlemci performansı şikayetini en çok alan işlemci nesli 14 şikayetle "Intel Celeron" , 10 şikayetle "8.Nesil" ve 9 şikayetle "5.Nesil"

>* İşlemci performansı şikayetinin İşlemci hızı'na göre kıyaslaması
"""

islemci_performansi["İşlemci Hızı (GHz)"].value_counts()

""""İşlemci performansı" şikayetini en çok alan işlemci hızı 14 şikayetle "1.6" GHz 12 şikayetle "2.9" GHz ve 10 şikayetle "2.00" GHz

>  * Ekran kartı performansı şikayetinin ekran kartı hafızasına göre kıyaslaması
"""

islemci_performansi["İşlemci Çekirdek Sayısı"].value_counts()

""""İşlemci performansı" şikayetini en çok alan işlemci çekirdek sayısı "2.00"

>  * İşlemci performansı şikayetinin CPU iş parçacığı'na göre kıyaslaması
"""

islemci_performansi["CPU İş Parçacığı"].value_counts()

""""İşlemci performansı" şikayetini en çok alan CPU iş parçacığı 32 şikayetle "2.00" ve 25 şikayetle "4.00"

>* "İşlemci performansı" şikayetine sahip modellerin tüm özelliklerinin birbiriyle ilişkisini gösteren grafik
"""

corr = islemci_performansi.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""Bu grafikler sonucunda elde ettiğimiz bilgiler şu şekildedir :

"İşlemci performansı" şikayeti gözlenen cihazlarda ,

* İşlemci hızı , işlemci çekirdek hızı ve CPU iş parçacığı'ndan bağımsızdır.
* İşlemci çekirdek sayısı , CPU iş parçacığı ile doğru orantılıdır.

# **5.10 ) Kasma Sorunu**
"""

kasma_sorunu = data[data['Şikayet Kategorisi'].str.contains('Kasma sorunu')]

kasma_sorunu[['MARKA','MODEL','Şikayet Kategorisi']].info()

""""Kasma sorunu" şikayet kategorisine ait 122 veri var."""

kasma_sorunu[['MARKA','MODEL','Şikayet Kategorisi']].describe()

"""> *   Kasma sorunu şikayetinin markalara göre kıyaslaması



"""

kasma_sorunu["MARKA"].value_counts()

""""Kasma sorunu" şikayetini en çok alan marka 55 şikayetle "ASUS" ve 37 şikayetle "HP"

> *   Kasma sorunu şikayetinin modele göre kıyaslaması
"""

kasma_sorunu["MODEL"].value_counts()

""""Kasma sorunu" şikayetini en çok alan model 12 şikayetle "HP 15-RA012NT 15.6" Intel Celeron-N3060 1.6 GHz / 4 GB / 512 GB HDD " , 11 şikayetle "Hometech Alfa 110A 11.6" Intel Atom-Z3735F 1.33 GHz / 2 GB / 32 GB eMMC" ve 10 şikayetle "Asus VivoBook 15 X505BP-BR019 15.6" AMD A9 9420  2.9 GHz / 4 GB / 1000 GB""""

corr = kasma_sorunu.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""# **5.11 ) Malzeme Kalitesi**"""

malzeme_kalitesi = data[data['Şikayet Kategorisi'].str.contains('Malzeme kalitesi')]

malzeme_kalitesi[['MARKA','MODEL','Şikayet Kategorisi']].info()

""""Malzeme kalitesi" şikayet kategorisine ait 139 veri var."""

malzeme_kalitesi[['MARKA','MODEL','Şikayet Kategorisi']].describe()

"""> *   Malzeme kalitesi şikayetinin markalara göre kıyaslaması



"""

malzeme_kalitesi["MARKA"].value_counts()

""""Malzeme kalitesi" şikayetini en çok alan marka "ASUS"

> *   Malzeme kalitesi şikayetinin modele göre kıyaslaması
"""

malzeme_kalitesi["MODEL"].value_counts()

""""Malzeme kalitesi" şikayetini en çok alan model 18 şikayetle "Asus K555UB-XO099D 15.6"  Intel Core i5-6200U 2.30 GHz / 4 GB / 1000 GB HDD" , 13 şikayetle "Lenovo IdeaPad S145-15API 15.6" AMD Ryzen 7 3700U 2.3 GHz / 8 GB / 512 GB SSD" ve 12 şikayetle "HP 15-BS154NT 15.6" Intel Core i3-5005U 2.0 GHz / 4 GB / 128 GB SSD""""

corr = malzeme_kalitesi.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""# **5.12 ) RAM Performansı**"""

ram_performansi = data[data['Şikayet Kategorisi'].str.contains('RAM performansı')]

ram_performansi[['MARKA','MODEL','Ram (GB)','Ram Hızı (MHz)','Şikayet Kategorisi']].info()

""""RAM performansı" şikayet kategorisine ait 103 veri var."""

ram_performansi[['MARKA','MODEL','Ram (GB)','Ram Hızı (MHz)','Şikayet Kategorisi']].describe()

"""> *   RAM performansı şikayetinin markalara göre kıyaslaması



"""

ram_performansi["MARKA"].value_counts()

""""Ram performansı" şikayetini en çok alan markalar 42 şikayetle "ASUS" ve 31 şikayetle "ACER"

> *   RAM performansı şikayetinin modele göre kıyaslaması
"""

ram_performansi["MODEL"].value_counts()

""""RAM performansı" şikayetini en çok alan model 15 şikayetle "Acer Swift 3 15.6" Intel Core i5-8250U 1.6 GHz / 4 GB / 256 GB SSD" ve 12 şikayetle "Asus X542UR-GQ434 15.6" Intel Core i5-8250U 1.6 GHz / 4 GB / 1 TB"

>* RAM performansı şikayetinin ram'e göre kıyaslaması
"""

ram_performansi["Ram (GB)"].value_counts()

""""RAM performansı" şikayetini en çok "4" GB ram'e sahip cihazlar almıştır.

>* RAM performansı şikayetinin ram hızı'na göre kıyaslaması
"""

ram_performansi["Ram Hızı (MHz)"].value_counts()

""""RAM performansı" şikayetini en çok "2133" MHz ram hızına sahip cihazlar almıştır.

>* "RAM performansı" şikayetine sahip modellerin tüm özelliklerinin birbiriyle ilişkisini gösteren grafik
"""

corr = ram_performansi.corr()
plt.figure(figsize=(10, 8))
ax = sns.heatmap(
    corr, 
    vmin=-1, vmax=1, center=0,
    cmap=sns.diverging_palette(20, 220, n=200),
    square=True
)
ax.set_xticklabels(ax.get_xticklabels(),rotation=45,horizontalalignment='right');

"""Bu grafikler sonucunda elde ettiğimiz bilgiler şu şekildedir :

"RAM performansı" şikayeti gözlenen cihazlarda ,

* Ram ile ram hızı bağımsızdır.
 
"""